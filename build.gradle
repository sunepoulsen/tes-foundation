import org.jetbrains.changelog.ExtensionsKt

buildscript {
    repositories {
        mavenCentral()
    }
}

plugins {
    id 'org.jetbrains.changelog'
    id 'net.researchgate.release'
    id 'org.sonarqube'
    id 'jacoco'
}

group = 'dk.sunepoulsen.tes-foundation'
version = "${project.property('version')}"

tasks.register('allWrappers', Wrapper) {
    gradleVersion = "${project.property('gradle.version')}"
}

apply from: "${rootProject.projectDir}/gradle/changelog.gradle"

release {
    tagTemplate = 'v${version}'
    git {
        requireBranch.set('main')
    }
}

tasks.register('updateChangelogs') {
    subprojects.each {
        dependsOn("${it.name}:patchChangelog")
    }
    dependsOn('patchChangelog')
}

tasks.register('publishArtifacts') {
    subprojects.each {
        dependsOn("${it.name}:publish")
    }
}

tasks.afterReleaseBuild.dependsOn tasks.updateChangelogs
tasks.afterReleaseBuild.dependsOn tasks.publishArtifacts

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'groovy'
    apply plugin: 'maven-publish'
    apply plugin: 'org.jetbrains.changelog'
    apply plugin: 'jacoco'

    group = 'dk.sunepoulsen.tes-foundation'

    repositories {
        mavenLocal()
        mavenCentral()

        maven {
            url = "$mavenRepositoryBaseUrl/$mavenRepositorySnapshots"
            allowInsecureProtocol = true
        }
        maven {
            url = "$mavenRepositoryBaseUrl/$mavenRepositoryReleases"
            allowInsecureProtocol = true
        }
    }

    // Helper closure to check if project contains source code
    def hasSourceCode = {
        fileTree(projectDir).matching {
            include 'src/main/java/**', 'src/main/resources/**'
        }.files.size() > 0
    }

    if (hasSourceCode()) {
        publishing {
            publications {
                maven(MavenPublication) {
                    from components.java
                }
            }

            repositories {
                maven {
                    url = "$mavenRepositoryBaseUrl/" + (
                        version ==~ /^\d+\.\d+\.\d+$/ ?
                            "$mavenRepositoryReleases" :
                            "$mavenRepositorySnapshots"
                    )
                    allowInsecureProtocol = true
                    credentials {
                        username = "$mavenRepositoryUsername"
                        password = "$mavenRepositoryPassword"
                    }
                }
            }
        }
    } else {
        // For projects without source code, disable publishing tasks
        tasks.withType(PublishToMavenRepository).configureEach { task ->
            task.enabled = false
        }
    }

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(project.property('java.version').toString())
        }
    }

    dependencies {
        // Lombok
        compileOnly 'org.projectlombok:lombok:1.18.38'
        annotationProcessor 'org.projectlombok:lombok:1.18.38'

        // Logging
        implementation 'ch.qos.logback:logback-classic:1.5.18'
        implementation 'org.slf4j:log4j-over-slf4j:2.0.17'

        // JUnit
        testImplementation 'org.junit.vintage:junit-vintage-engine:5.13.4'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.13.4'

        // Spock
        testImplementation 'org.apache.groovy:groovy-all:4.0.28'
        testImplementation 'org.spockframework:spock-core:2.3-groovy-4.0'
        testImplementation 'net.bytebuddy:byte-buddy:1.17.7'
        testImplementation 'org.objenesis:objenesis:3.4'
    }

    test {
        useJUnitPlatform()
    }

    apply from: "${rootProject.projectDir}/gradle/changelog.gradle"

    jacocoTestReport {
        reports {
            xml.required = true
        }
    }

    tasks.jacocoTestReport.dependsOn tasks.test

}

sonar {
    properties {
        property "sonar.projectName", "TES Foundation"
        property "sonar.projectKey", "tes-foundation"

        property 'sonar.dependencyCheck.severity.blocker', '9.0'
        property 'sonar.dependencyCheck.severity.critical', '7.0'
        property 'sonar.dependencyCheck.severity.major', '4.0'
        property 'sonar.dependencyCheck.severity.minor', '0.0'
    }
}
