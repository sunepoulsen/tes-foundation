pipeline {
   agent any

   options {
      timeout(time: 120, unit: 'MINUTES')
   }

   environment{
      // Set owaspDependencyCheckApiKey System property for Gradle.
      // owaspDependencyCheckApiKey is the Api get that is used by
      // `org.owasp:dependency-check-gradle` to check for vulnerabilities.
      ORG_GRADLE_PROJECT_owaspDependencyCheckApiKey = credentials('<nvd-api-credential>')

      // Give Gradle extra resources to execute the tasks.
      GRADLE_OPTS = '-Dorg.gradle.jvmargs="-Xmx2g -Xms512m -XX:+HeapDumpOnOutOfMemoryError"'
   }

   tools {
      jdk 'jdk-21'
   }

   triggers{
      // Run pipeline daily on a project determined time between midnight and 7am (only main)
      cron(env.branch_name == "main" ? 'H H(0-6) * * *' : '')
   }

   stages {
      stage('Clean') {
         steps {
             sh './pipelines/pipeline-clean.py'
         }
      }
      stage('Build') {
         steps {
            sh './pipelines/pipeline-build.py'
         }
         post {
            always {
               archiveArtifacts artifacts: '**/build/docs/javadoc/**', fingerprint: true, onlyIfSuccessful: false
               junit '**/build/test-results/**/*.xml'
            }
         }
      }
      stage('Publish & Analysis') {
         parallel {
             stage('Publish') {
                 steps {
                     sh './pipelines/pipeline-publish.py'
                 }
             }
             stage('Analyze') {
                 steps {
                     sh './pipelines/pipeline-analyze.py'
                 }
                 post {
                     always {
                         archiveArtifacts artifacts: '**/build/reports/jacoco/**', fingerprint: true, onlyIfSuccessful: false
                         archiveArtifacts artifacts: 'build/reports/**', fingerprint: true, onlyIfSuccessful: false
                     }
                 }
             }
         }
      }
   }
}
